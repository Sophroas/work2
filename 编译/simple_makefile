# 简化的Makefile用于测试编译器架构

CXX = g++
CXXFLAGS = -std=c++20 -Wall -Wextra -O2
INCLUDES = -Isrc -I.

# 源文件（不包括lexer和parser）
CORE_SOURCES = src/ast.cpp \
               src/symbol_table.cpp \
               src/semantic_analyzer.cpp \
               src/code_generator.cpp \
               src/optimizer.cpp

# 目标文件
CORE_OBJECTS = $(CORE_SOURCES:.cpp=.o)

# 测试程序
TEST_TARGET = simple_test
COMPREHENSIVE_TARGET = comprehensive_test

.PHONY: test comprehensive clean

test: $(TEST_TARGET)
	./$(TEST_TARGET)

comprehensive: $(COMPREHENSIVE_TARGET)
	./$(COMPREHENSIVE_TARGET)

$(TEST_TARGET): simple_test.cpp $(CORE_OBJECTS)
	$(CXX) $(CXXFLAGS) $(INCLUDES) $< $(CORE_OBJECTS) -o $@

$(COMPREHENSIVE_TARGET): comprehensive_test.cpp $(CORE_OBJECTS)
	$(CXX) $(CXXFLAGS) $(INCLUDES) $< $(CORE_OBJECTS) -o $@

%.o: %.cpp
	$(CXX) $(CXXFLAGS) $(INCLUDES) -c $< -o $@

clean:
	rm -f $(CORE_OBJECTS) $(TEST_TARGET) $(COMPREHENSIVE_TARGET)

# 依赖关系
src/ast.o: src/ast.cpp src/ast.h
src/symbol_table.o: src/symbol_table.cpp src/symbol_table.h
src/semantic_analyzer.o: src/semantic_analyzer.cpp src/semantic_analyzer.h src/ast.h src/symbol_table.h
src/code_generator.o: src/code_generator.cpp src/code_generator.h src/ast.h src/symbol_table.h
src/optimizer.o: src/optimizer.cpp src/optimizer.h src/ast.h
